package main

func main() {
	TestTwoSum4()
	//TestTrimBST()
	//TestIncreasingBST2orderSearchTree()
	//TestConvertBST2GreaterTree()
	//TestFindModeInBST()
	//TestMinimumAbsDifferenceBST()
	//TestFindKthSmallestBST()
	//TestSerializeDeserializeBST()
	//TestConstructBSTFromPreorder()
	//TestConvertSortedListToBST()
	//TestValidateBinarySearch()
	//TestLFUCache()
	//TestMaxNestingDepthOf2ValidParenthesesStrings()
	//TestScoreOfParentheses()
	//TestInsertions2BalanceParenthesesString()
	//TestValidParenthesisString()
	//TestRemoveInvalidParenthese()
	//TestLongestValidParentheses()
	//TestValidParentheses()
	//TestTrappingRainWater()
	//TestSumOfSubArrayRanges()
	//TestSumSubarrayMins()
	//TestMaximalRectangle()
	//TestPacificAtlanticWaterFlow()
	//TestLargestRectangleInHistogram()
	//TestMonotoneIncreasingDigits()
	//TestDailyTemperatures()
	//TestNextGreaterElement()
	//TestMaxArea()
	//TestMonotonicArray()
	//TestUniqueSubstringsInWraparoundString()
	//TestRepeatedSubstringPattern()
	//TestLargestPerimeterTriangle()
	//TestLRUCache()
	//TestDijkstra()
	//TestMedianFinder()
	//TestMyQueue()
	//TestMyStack()
	//TestMinStack()
	//TestNewFlightMaps()
	//TestTaskManager()
	//TestTaskHeap()
	//testSort()
	//TestFlattenBinaryTree2List()
	//TestAllPath()
	//TestPathSumII()
	//testConvertSortedArray2BinarySearchTree()
	//testIsBalancedBST()
	//testContainsNearbyAlmostDuplicate3()
	//testKthLargest()
	//testDeleteBST()
	//testInsertBST()
	//testSearchBST()
	//testBSTIterator()
	//TestValidateBinarySearch()
	//TestCodec1()
	//TestCodec()
	//TestLowestCommonAncestor()
	//TestSetNextRightPointer()
	//TestRecoverBTPreInorderOrder()
	//TestRecoverBTInorderPostOrder()
	//testRotateString()
	//testTwoSum()
	//testAddTwoNumbers()
	//testLengthOfLongestSubstring()
	//testFindMedianSortedArrays()
	//testLongestPalindrome()
	//testCoinChange()
	//testMinWindow()
	//testMinDepth()
	//testBackspaceCompare()
	//testMinChanges()
	//testBTPreorder()
	//testMaximumDepthOfBinaryTree()
	//testMaximumDepthOfBinaryTree2()
	//testMaximumDepthOfBinaryTree3()
	//TestSymmetricTree()
	//TestPathSum()
	//TestPathSum2()
}
